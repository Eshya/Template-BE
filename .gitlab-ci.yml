image: docker:latest
services:
  - docker:dind

stages:
  - build
  - deploy
  - notification

variables:
  TAG_IMAGE: $CI_COMMIT_BRANCH-$CI_COMMIT_SHA

docker-build:
  stage: build
  script:
    - aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin $AWS_ECR_REPOSITORY
    - docker build -t "${AWS_ECR_REPOSITORY}/${CI_PROJECT_NAME}:latest" -t "${AWS_ECR_REPOSITORY}/${CI_PROJECT_NAME}:$TAG_IMAGE" .
    - docker push "${AWS_ECR_REPOSITORY}/${CI_PROJECT_NAME}" --all-tags
  environment:
    name: production
  only:
    - production
  tags:
    - chickin-prod

deploy-production:
  stage: deploy
  script:
    - aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin $AWS_ECR_REPOSITORY
    - export APP_IMAGE_PROD="${AWS_ECR_REPOSITORY}/${CI_PROJECT_NAME}"
    - export APP_IMAGE_PROD_TAG="${TAG_IMAGE}"
    - docker-compose -f docker-compose.prod.yml pull
    - docker-compose -f docker-compose.prod.yml up -d
  environment:
    name: production
  only:
    - production
  tags:
    - chickin-prod

docker-build:
  stage: build
  script:
    - aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin $AWS_ECR_REPOSITORY
    - docker build -t "${AWS_ECR_REPOSITORY}/${CI_PROJECT_NAME}:latest" -t "${AWS_ECR_REPOSITORY}/${CI_PROJECT_NAME}:$TAG_IMAGE" .
    - docker push "${AWS_ECR_REPOSITORY}/${CI_PROJECT_NAME}" --all-tags
  only:
    - staging
  tags:
    - chickin-stag

deploy-staging:
  stage: deploy
  script:
    - aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin $AWS_ECR_REPOSITORY
    - export APP_IMAGE_STG="${AWS_ECR_REPOSITORY}/${CI_PROJECT_NAME}"
    - export APP_IMAGE_STG_TAG="${TAG_IMAGE}"
    - env
    - docker-compose -f docker-compose.stg.yml pull
    - docker-compose -f docker-compose.stg.yml up -d
  environment:
    name: staging
  only:
    - staging
  tags:
    - chickin-stag

success_notification:
  stage: notification
  image: ubuntu:latest
  script:
    - apt update && apt install wget curl -y
    - wget https://raw.githubusercontent.com/DiscordHooks/gitlab-ci-discord-webhook/master/send.sh
    - chmod +x ./send.sh
    - echo $DISCORD_WEBHOOK_URL
    - ./send.sh success $DISCORD_WEBHOOK_URL
  when: on_success

failure_notification:
  stage: notification
  image: ubuntu:latest
  script:
    - apt update && apt install wget curl -y
    - wget https://raw.githubusercontent.com/DiscordHooks/gitlab-ci-discord-webhook/master/send.sh
    - chmod +x ./send.sh
    - echo $DISCORD_WEBHOOK_URL
    - ./send.sh failure $DISCORD_WEBHOOK_URL
  when: on_failure